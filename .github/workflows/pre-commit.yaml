name: Lint

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Mamba
        uses: mamba-org/setup-micromamba@v2
        with:
          environment-file: environment.yml
          environment-name: sciencelive
          cache-environment: true
          init-shell: bash
          condarc: |
            channels:
              - conda-forge
            channel_priority: strict

      - name: Install custom packages and pre-commit
        shell: micromamba-shell {0}
        run: |
          pip install pre-commit nblint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if ! command -v myst &> /dev/null; then npm install -g mystmd; fi  # Ensure mystmd for validation

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Setup pre-commit
        shell: micromamba-shell {0}
        run: |
          pre-commit install-hooks

      - name: Run pre-commit (pull request)
        if: github.event_name == 'pull_request'
        shell: micromamba-shell {0}
        run: |
          pre-commit run --color=always --from-ref '${{ github.event.pull_request.base.sha }}' --to-ref '${{ github.event.pull_request.head.sha }}' 2>&1 | tee pre-commit-output

      - name: Run pre-commit (push)
        if: github.event_name == 'push'
        shell: micromamba-shell {0}
        run: |
          pre-commit run --color=always --all-files 2>&1 | tee pre-commit-output

      - name: Validate MyST Markdown
        shell: micromamba-shell {0}
        run: |
          echo "Validating MyST Markdown files"
          myst build --execute --check-links  || echo "MyST Markdown validation failed"
        continue-on-error: true

      - name: Pre-commit feedback
        if: failure()
        shell: micromamba-shell {0}
        run: |
          cat <<EOF >> report
          ## pre-commit failed

          Run `pre-commit run --all-files` to check for errors.
          Usually, these will be auto-formatting changes,
          which you can commit and push.

          You can install the pre-commit hooks with:

          ```
          pip install pre-commit
          pre-commit install
          ```

          pre-commit output:

          ```
          $(cat pre-commit-output | sed 's/\x1b\[[0-9;?]*[mh]//g')
          ```

          <details>
          <summary>diff produced by auto-formatters:</summary>

          ```diff
          $(git diff HEAD)
          ```

          </details>

          EOF

          cat report
          cat report >> $GITHUB_STEP_SUMMARY
